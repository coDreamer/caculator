//Judge.h
#include"dostack.h"
using namespace std;

int length = 0;
int error = 0;

bool isNumber(char a){
	if (a <= '9'&&a >= '0')
		return true;
	else
		return false;
}
bool isCharacter(char a){
	if (a == '*' || a == '-' || a == '+' || a == '/' || a == '%')
		return true;
	else
		return false;
}
//不合法字符检查
int one_analys(char p[]){
	cout << "第一步检测"<<endl;
	char Species_coding[18] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '+', '-', '*', '/', '(', ')', '%' };
	int i = 0, j = 0;
	while (i < length){
		for (j = 0; j < 18; j++){
			if (p[i] == Species_coding[j])
				break;
		}
		if (j >= 18){
			cout << "出现不合法字符！请检查重新输入" << endl;
			return 0;
		}
		i++;
	}
	return 1;
}
//检查运算符位置是否正确
int second_analys(char p[]){
	cout << "第二步检测" << endl;
	if (p[0] == '*' || p[0] == '/' || p[0] == '%'){
		cout << "首字符不该为*或/或%" << endl;
		cout << "请检查重新输入" << endl;
		return 0;
	}//*1+3-6
	if (isCharacter(p[length - 1]) == true){
		cout << "末尾字符不该为运算符" << endl;
		cout << "请检查重新输入" << endl;
		return 0;
		
	}
	int i = 1;
	while (i < length){
		if (isCharacter(p[i]) == true && p[i + 1] != NULL){
			if (p[i] == '/' && p[i + 1] == '0'&&p[i + 2] != '.'){
				cout << "被除数不能为零";
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}
			if (p[i] == '%'){
				if (p[i + 1] == '0'){
					cout << "整除取余被除数不能为零或小数";
					cout << "请检查然后重新输入!" << endl;
					return 0;
				}
				if (isNumber(p[i - 1]) == true){
					int n = i - 1;
					while (isNumber(p[n]) == true){
						n--;
					}
					if (p[n] == '.'){
						cout << "整除取余除数不能为零或小数";
						cout << "请检查然后重新输入!" << endl;
						return 0;
					}
				}
			}
			if (isCharacter(p[i + 1]) == true){
				cout << "出现两个运算符相邻而中间没有操作数" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}//3*+2+5
			if (p[i + 1] == ')'){
				cout << "运算符后直接是右括号！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}
			if (p[i - 1] == '(' && p[i] != '+'){
				if (p[i] != '-'){
					cout << "左括号后直接是运算符！" << endl;
					cout << "请检查然后重新输入!" << endl;
					return 0;
				}
			}
			if (p[i + 1] == '.'){
				cout << "运算符后直接是小数点！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}//1+5-.3+5
			if (p[i - 1] == '.'){
				cout << "小数点后直接是运算符！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}
		}
		i++;
	}
	return 1;
}
//检查小数点位置是否正确
int third_analys(char p[]){
	cout << "第三步检测" << endl;
	if (p[0] == '.' || p[length - 1] == '.'){
		cout << "首末字符是.出错！" << endl;
		cout << "请检查然后重新输入!" << endl;
		return 0;
	}//.1+3
	int i = 1;
	while (i < length){
		if (p[i] == '.'){
			if (p[i + 1] == '.'){
				cout << "连续的两个小数点出错！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0; 
			}//1..3+3
			if (p[i - 1] == '(' || p[i - 1] == ')'){
				cout << "括号接小数点出错！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}//1+3*(.3+5)
			if (p[i + 1] == '(' || p[i + 1] == ')'){
				cout << "小数点接括号出错！" << endl;
				cout << "请检查然后重新输入!" << endl;
				return 0;
			}//1.(+3-5
		}
		i++;
	}
	return 1;
}
//括号检查
bool isEmpty(char ss[], int top){
	if (top == -1)
		return true;
	else
		return false;
}
char Pop(char ss[], int &top){
	if (top == -1){
		cout << "栈空，出栈错误！" << endl;
		return 0;
	}
	char a;
	a = ss[top];
	top = top - 1;
	return a;
}
int Push(char ss[], char a, int &top){
	if (top == Maxlen - 1){
		cout << "栈满，入栈错误！" << endl;
		return 0;
	}
	top = top + 1;
	ss[top] = a;
	return 1;
}

int forth_analys(char p[]){
	cout << "第四步检测" << endl;
	char ss[Maxlen];
	int top = -1;
	int i = 0;
	while (i < length){
		if (p[i] == '('){
			if ((i - 1 >= 0) && isNumber(p[i - 1]) == true){
				cout << "数字后面直接是左括号，请检查重新输入！" << endl;
				return 0;
			}//3(+5
			else{
				Push(ss, p[i], top);
			}
		}
		if (p[i] == ')'){
			if (isNumber(p[i + 1]) == true){
				cout << "右括号后面直接是数字，请检查重新输入！" << endl;
				return 0;
			}
			else{
				if (Pop(ss, top) != '('){
					cout << "括号出现错误！请检查重新输入！" << endl;
					return 0;
				}//9)%(3
			}
		}
		i++;
	}
	if (isEmpty(ss, top) == true){
		return 1;
	}
	else{
		cout << "括号出现错误！请检查重新输入！" << endl;
		return 0;
	}
}

int Analysis(char p[]){
	length = 0;
	for (int i = 0; p[i] != '\0'; i++)
		length++;
	cout << length;
	if (1 == one_analys(p)){
		if (1 == second_analys(p)){
			if (1 == third_analys(p)){
				if (1 == forth_analys(p)){
					return 1;
				}
				else{
					return 0;
				}
			}
			else{
				return 0;
			}
		}
		else{
			return 0;
		}
	}
	else{
		return 0;
	}
}

//dostack.h
#include "iostream" 
#include "math.h" 
#include "string" 
#include "stdlib.h"  
#define Maxlen 400
using namespace std;

struct operater
{
	char data[Maxlen];
	int top;
}operater; //定义运算符栈，并定义全局变量 

struct record
{
	double data[Maxlen];
	int top;
}record; //定义操作数栈，并定义全局变量 

int change(char *p, char q[]) //将算术表达式p转换成表达式后缀表达式q
{
	int i = 0; //i作为q的下标 
	int dh = 1; //dh=1表示是负号 
	operater.top = -1; //初始化运算符栈 
	while (*p != '\0') //p表达式未扫描完时循环 
	{
		switch (*p) //判断各种情况,并做相应的处理 
		{
		case '(':{
			operater.top++;
			operater.data[operater.top] = *p; dh = 1;
			p++;
			break;
		}
		case ')':{
			while (operater.data[operater.top] != '(')
			{
				q[i] = operater.data[operater.top];
				operater.top--;
				i++;
			}
			operater.top--;
			p++;
			dh = 0;
			break;
		}
		case '+':
		case '-': if (dh == 1) // +,-是正负号 
		{
			if (*p == '-')
				operater.top++;
			operater.data[operater.top] = '@'; 
			p++;
			break;
		}
			while (operater.top != -1 && operater.data[operater.top] != '(')
			{
				q[i] = operater.data[operater.top];
				operater.top--; i++;
			}
			operater.top++;
			operater.data[operater.top] = *p;
			p++; dh = 0;
			break;
		case '*':
		case '/': 
			while (operater.data[operater.top] == '*' || operater.data[operater.top] == '/')
		{
			q[i] = operater.data[operater.top];
			operater.top--;
			i++;
		}
			operater.top++;
			operater.data[operater.top] = *p;
			p++; dh = 0;
			break;
		case '%':
			while (operater.data[operater.top] == '%')
		{
			q[i] = operater.data[operater.top];
			operater.top--;
			i++;
		}
			operater.top++;
		    operater.data[operater.top] = *p;
			p++;
			dh = 0;
			break;
		case ' ': p++;
			break; //消除空格 

		default:
			while (*p >= '0' && *p <= '9') //判断是否为数字 
			{
				q[i] = *p;
				i++;
				p++;
			}
			if (*p == '.')
			{
				q[i] = '.';
				i++;
				p++;
				while (*p >= '0' && *p <= '9')
				{
					q[i] = *p;
					i++;
					p++;
				}
			}
			q[i] = '#'; 
			i++; 
			dh = 0;//用#标识一个数值串结束 
		}
	}
	while (operater.top != -1) //栈不空时循环 
	{
		q[i] = operater.data[operater.top];
		i++;
		operater.top--;
	}
	q[i] = '\0'; //给q表达式添加结束标识 
	return 1;
}

double calculator(char *q) //计算后缀表达式的值 
{
	double d, x;
	record.top = -1; //初始化操作数栈 
	while (*q != '\0') //q字符串未扫描完时循环 
	{
		switch (*q) //判断各种情况，并做相应的运算,并入栈 
		{
		case '+':record.data[record.top - 1] = record.data[record.top - 1] + record.data[record.top];
			record.top--;
			break;
		case '-':record.data[record.top - 1] = record.data[record.top - 1] - record.data[record.top];
			record.top--;
			break;
		case '*':record.data[record.top - 1] = record.data[record.top - 1] * record.data[record.top];
			record.top--;
			break;
		case '/': 
			if (record.data[record.top] != 0)
			        record.data[record.top - 1] = record.data[record.top - 1] / record.data[record.top];
				  record.top--;
				  break;
		case '%':
			record.data[record.top - 1] = fmod(record.data[record.top - 1], record.data[record.top]);
			record.top--;
			break;
		case '@':
			record.data[record.top] = -(record.data[record.top]);
			break;
		default:
			d = 0; //将数字字符转换成数值存放到d中 
			while (*q >= '0' && *q <= '9') //为数字字符 
			{
				d = 10 * d + (*q - '0'); //转变成整形 
				q++;
			}
			x = 0.1;
			if (*q == '.') //小数点 
			{
				q++;
				while (*q >= '0' && *q <= '9') //为数字字符 
				{
					d = d + x*(*q - '0');
					x *= 0.1;
					q++;
				}
			}
			record.top++;
			record.data[record.top] = d; //入操作数栈 
		}
		q++;
	}
	return record.data[record.top]; //返回计算结果
}

//main.cpp
#include "windows.h"
#include"Judge.h"
using namespace std;

void meun()
{
	system("color 0a");
	cout << "\t\t **************************************" << endl;
	cout << "\t\t            安徽工程大学" << endl;
	cout << "\t\t            请输入表达式(支持四则及求余混合运算，括号不支持中文!!!)" << endl;
	cout << "\t\t **************************************" << endl;
	cout << endl;
	cout << "\t\t 输入end可结束本程序" << endl;
}

int main()
{
	char p[400], q[400];
	double k;
	void meun(); //声明菜单函数 
	int change(char *p, char q[]); //声明转换函数 
	double calculator(char *q); //声明计算函数 
	meun();
	for (;;) //循环执行 
	{
		cout << "\t\t 请输入:";
		cin >> p;
		if (strcmp(p, "end") == 0)
			return 0;
		int a = Analysis(p);
		cout << a;
		if (a == 1){
			if (change(p, q) == 1)
			{
				k = calculator(q);
				cout << "\t\t 计算结果为:" << k << endl;
			}
		}
		else{
			continue;
		}
		system("pause"); //控制输出格式 
		system("cls");//清屏
		meun();
	}
	return 0;
}